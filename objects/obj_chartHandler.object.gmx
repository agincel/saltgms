<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

//load song
loadedSong = file_text_open_read("song1.txt");
file_text_read_string(loadedSong); //get through title
global.tempo = file_text_read_real(loadedSong); //load tempo


beatThreshold = (1 / global.tempo * 60) / 4;
numBeats = 0;

global.queuedNote[0] = false;
global.queuedNote[1] = false;
global.queuedNote[2] = false;
global.queuedNote[3] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Beat Sync

if ((audio_sound_get_track_position(global.song) - (numBeats * beatThreshold)) &gt;= beatThreshold)
{
    /*
    //16th note beat
    if numBeats % 4 == 0
    {
        //quarter note
        global.queuedNote[floor(random(4))] = true;
        global.queuedNote[floor(random(4))] = true;
    }
    else if numBeats % 4 == 1 or numBeats % 4 = 3
    {
        //sixteenth notes
        
    }
    else if numBeats % 4 == 2
    {
        //eighth notes
    }*/
    
    global.queuedNote[0] = file_text_read_real(loadedSong);
    global.queuedNote[1] = file_text_read_real(loadedSong);
    global.queuedNote[2] = file_text_read_real(loadedSong);
    global.queuedNote[3] = file_text_read_real(loadedSong);
    
    numBeats += 1;
}
else if ((audio_sound_get_track_position(global.song) - (numBeats * beatThreshold)) &lt; 0)
{
    //song looped
    numBeats = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
